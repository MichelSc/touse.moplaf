/**
 */
package com.misc.touse.moplaf.tousereplica.provider;

import com.misc.touse.moplaf.tousereplica.util.ToUseReplicaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ToUseReplicaItemProviderAdapterFactory extends ToUseReplicaAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ToUseReplicaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.TimeLineAbstract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLineAbstractItemProvider timeLineAbstractItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.TimeLineAbstract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLineAbstractAdapter() {
		if (timeLineAbstractItemProvider == null) {
			timeLineAbstractItemProvider = new TimeLineAbstractItemProvider(this);
		}

		return timeLineAbstractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.TimeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLineItemProvider timeLineItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.TimeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLineAdapter() {
		if (timeLineItemProvider == null) {
			timeLineItemProvider = new TimeLineItemProvider(this);
		}

		return timeLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.TimeLineBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLineBucketItemProvider timeLineBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.TimeLineBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLineBucketAdapter() {
		if (timeLineBucketItemProvider == null) {
			timeLineBucketItemProvider = new TimeLineBucketItemProvider(this);
		}

		return timeLineBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.RTimeLineAbstract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RTimeLineAbstractItemProvider rTimeLineAbstractItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.RTimeLineAbstract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRTimeLineAbstractAdapter() {
		if (rTimeLineAbstractItemProvider == null) {
			rTimeLineAbstractItemProvider = new RTimeLineAbstractItemProvider(this);
		}

		return rTimeLineAbstractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.RTimeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RTimeLineItemProvider rTimeLineItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.RTimeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRTimeLineAdapter() {
		if (rTimeLineItemProvider == null) {
			rTimeLineItemProvider = new RTimeLineItemProvider(this);
		}

		return rTimeLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.RTimeLineBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RTimeLineBucketItemProvider rTimeLineBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.RTimeLineBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRTimeLineBucketAdapter() {
		if (rTimeLineBucketItemProvider == null) {
			rTimeLineBucketItemProvider = new RTimeLineBucketItemProvider(this);
		}

		return rTimeLineBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.TimeLineReplicator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLineReplicatorItemProvider timeLineReplicatorItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.TimeLineReplicator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLineReplicatorAdapter() {
		if (timeLineReplicatorItemProvider == null) {
			timeLineReplicatorItemProvider = new TimeLineReplicatorItemProvider(this);
		}

		return timeLineReplicatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousereplica.TimeLineReplicatorBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLineReplicatorBucketItemProvider timeLineReplicatorBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousereplica.TimeLineReplicatorBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLineReplicatorBucketAdapter() {
		if (timeLineReplicatorBucketItemProvider == null) {
			timeLineReplicatorBucketItemProvider = new TimeLineReplicatorBucketItemProvider(this);
		}

		return timeLineReplicatorBucketItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (timeLineAbstractItemProvider != null)
			timeLineAbstractItemProvider.dispose();
		if (timeLineItemProvider != null)
			timeLineItemProvider.dispose();
		if (timeLineBucketItemProvider != null)
			timeLineBucketItemProvider.dispose();
		if (rTimeLineAbstractItemProvider != null)
			rTimeLineAbstractItemProvider.dispose();
		if (domainItemProvider != null)
			domainItemProvider.dispose();
		if (rTimeLineItemProvider != null)
			rTimeLineItemProvider.dispose();
		if (rTimeLineBucketItemProvider != null)
			rTimeLineBucketItemProvider.dispose();
		if (timeLineReplicatorItemProvider != null)
			timeLineReplicatorItemProvider.dispose();
		if (timeLineReplicatorBucketItemProvider != null)
			timeLineReplicatorBucketItemProvider.dispose();
	}

}
