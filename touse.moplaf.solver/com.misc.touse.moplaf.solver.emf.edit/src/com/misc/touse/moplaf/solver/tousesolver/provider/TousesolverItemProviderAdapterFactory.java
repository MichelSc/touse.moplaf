/**
 */
package com.misc.touse.moplaf.solver.tousesolver.provider;

import com.misc.touse.moplaf.solver.tousesolver.util.TousesolverAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TousesolverItemProviderAdapterFactory extends TousesolverAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TousesolverItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.Knapsack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnapsackItemProvider knapsackItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.Knapsack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnapsackAdapter() {
		if (knapsackItemProvider == null) {
			knapsackItemProvider = new KnapsackItemProvider(this);
		}

		return knapsackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.Item} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemItemProvider itemItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.Item}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemAdapter() {
		if (itemItemProvider == null) {
			itemItemProvider = new ItemItemProvider(this);
		}

		return itemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.DomainObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainObjectItemProvider domainObjectItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.DomainObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainObjectAdapter() {
		if (domainObjectItemProvider == null) {
			domainObjectItemProvider = new DomainObjectItemProvider(this);
		}

		return domainObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.DomainObjectFolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainObjectFolderItemProvider domainObjectFolderItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.DomainObjectFolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainObjectFolderAdapter() {
		if (domainObjectFolderItemProvider == null) {
			domainObjectFolderItemProvider = new DomainObjectFolderItemProvider(this);
		}

		return domainObjectFolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.KnapsackSol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnapsackSolItemProvider knapsackSolItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.KnapsackSol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnapsackSolAdapter() {
		if (knapsackSolItemProvider == null) {
			knapsackSolItemProvider = new KnapsackSolItemProvider(this);
		}

		return knapsackSolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.KnapsackLp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnapsackLpItemProvider knapsackLpItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.KnapsackLp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnapsackLpAdapter() {
		if (knapsackLpItemProvider == null) {
			knapsackLpItemProvider = new KnapsackLpItemProvider(this);
		}

		return knapsackLpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.LpRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LpRootItemProvider lpRootItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.LpRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLpRootAdapter() {
		if (lpRootItemProvider == null) {
			lpRootItemProvider = new LpRootItemProvider(this);
		}

		return lpRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.LpKnapsack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LpKnapsackItemProvider lpKnapsackItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.LpKnapsack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLpKnapsackAdapter() {
		if (lpKnapsackItemProvider == null) {
			lpKnapsackItemProvider = new LpKnapsackItemProvider(this);
		}

		return lpKnapsackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.LpItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LpItemItemProvider lpItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.LpItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLpItemAdapter() {
		if (lpItemItemProvider == null) {
			lpItemItemProvider = new LpItemItemProvider(this);
		}

		return lpItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.VarItemInKnapsack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VarItemInKnapsackItemProvider varItemInKnapsackItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.VarItemInKnapsack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVarItemInKnapsackAdapter() {
		if (varItemInKnapsackItemProvider == null) {
			varItemInKnapsackItemProvider = new VarItemInKnapsackItemProvider(this);
		}

		return varItemInKnapsackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.ConsKnapsackCapacity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConsKnapsackCapacityItemProvider consKnapsackCapacityItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.ConsKnapsackCapacity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConsKnapsackCapacityAdapter() {
		if (consKnapsackCapacityItemProvider == null) {
			consKnapsackCapacityItemProvider = new ConsKnapsackCapacityItemProvider(this);
		}

		return consKnapsackCapacityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUseGLPK} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolverToUseGLPKItemProvider solverToUseGLPKItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUseGLPK}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolverToUseGLPKAdapter() {
		if (solverToUseGLPKItemProvider == null) {
			solverToUseGLPKItemProvider = new SolverToUseGLPKItemProvider(this);
		}

		return solverToUseGLPKItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUseJavaILP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolverToUseJavaILPItemProvider solverToUseJavaILPItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUseJavaILP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolverToUseJavaILPAdapter() {
		if (solverToUseJavaILPItemProvider == null) {
			solverToUseJavaILPItemProvider = new SolverToUseJavaILPItemProvider(this);
		}

		return solverToUseJavaILPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUseNeos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolverToUseNeosItemProvider solverToUseNeosItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUseNeos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolverToUseNeosAdapter() {
		if (solverToUseNeosItemProvider == null) {
			solverToUseNeosItemProvider = new SolverToUseNeosItemProvider(this);
		}

		return solverToUseNeosItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.SolutionReaderToUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolutionReaderToUseItemProvider solutionReaderToUseItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.SolutionReaderToUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolutionReaderToUseAdapter() {
		if (solutionReaderToUseItemProvider == null) {
			solutionReaderToUseItemProvider = new SolutionReaderToUseItemProvider(this);
		}

		return solutionReaderToUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUserCplex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SolverToUserCplexItemProvider solverToUserCplexItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.solver.tousesolver.SolverToUserCplex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSolverToUserCplexAdapter() {
		if (solverToUserCplexItemProvider == null) {
			solverToUserCplexItemProvider = new SolverToUserCplexItemProvider(this);
		}

		return solverToUserCplexItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (domainItemProvider != null) domainItemProvider.dispose();
		if (knapsackItemProvider != null) knapsackItemProvider.dispose();
		if (itemItemProvider != null) itemItemProvider.dispose();
		if (domainObjectItemProvider != null) domainObjectItemProvider.dispose();
		if (domainObjectFolderItemProvider != null) domainObjectFolderItemProvider.dispose();
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (knapsackSolItemProvider != null) knapsackSolItemProvider.dispose();
		if (knapsackLpItemProvider != null) knapsackLpItemProvider.dispose();
		if (lpRootItemProvider != null) lpRootItemProvider.dispose();
		if (lpKnapsackItemProvider != null) lpKnapsackItemProvider.dispose();
		if (lpItemItemProvider != null) lpItemItemProvider.dispose();
		if (varItemInKnapsackItemProvider != null) varItemInKnapsackItemProvider.dispose();
		if (consKnapsackCapacityItemProvider != null) consKnapsackCapacityItemProvider.dispose();
		if (solverToUseGLPKItemProvider != null) solverToUseGLPKItemProvider.dispose();
		if (solverToUseJavaILPItemProvider != null) solverToUseJavaILPItemProvider.dispose();
		if (solverToUseNeosItemProvider != null) solverToUseNeosItemProvider.dispose();
		if (solutionReaderToUseItemProvider != null) solutionReaderToUseItemProvider.dispose();
		if (solverToUserCplexItemProvider != null) solverToUserCplexItemProvider.dispose();
	}

}
