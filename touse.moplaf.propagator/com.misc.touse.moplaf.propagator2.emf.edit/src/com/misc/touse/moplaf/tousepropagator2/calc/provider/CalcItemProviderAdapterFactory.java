/**
 */
package com.misc.touse.moplaf.tousepropagator2.calc.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.misc.touse.moplaf.tousepropagator2.calc.util.CalcAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CalcItemProviderAdapterFactory extends CalcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CalcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.ScopeProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeProjectItemProvider scopeProjectItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.ScopeProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeProjectAdapter() {
		if (scopeProjectItemProvider == null) {
			scopeProjectItemProvider = new ScopeProjectItemProvider(this);
		}

		return scopeProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskHoursItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerTaskHoursItemItemProvider layerTaskHoursItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskHoursItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerTaskHoursItemAdapter() {
		if (layerTaskHoursItemItemProvider == null) {
			layerTaskHoursItemItemProvider = new LayerTaskHoursItemItemProvider(this);
		}

		return layerTaskHoursItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskHoursVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerTaskHoursVarItemProvider layerTaskHoursVarItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskHoursVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerTaskHoursVarAdapter() {
		if (layerTaskHoursVarItemProvider == null) {
			layerTaskHoursVarItemProvider = new LayerTaskHoursVarItemProvider(this);
		}

		return layerTaskHoursVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskHours} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerTaskHoursItemProvider layerTaskHoursItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskHours}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerTaskHoursAdapter() {
		if (layerTaskHoursItemProvider == null) {
			layerTaskHoursItemProvider = new LayerTaskHoursItemProvider(this);
		}

		return layerTaskHoursItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskTimes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerTaskTimesItemProvider layerTaskTimesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskTimes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerTaskTimesAdapter() {
		if (layerTaskTimesItemProvider == null) {
			layerTaskTimesItemProvider = new LayerTaskTimesItemProvider(this);
		}

		return layerTaskTimesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskHoursItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskHoursItemItemProvider calcTaskHoursItemItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskHoursItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskHoursItemAdapter() {
		if (calcTaskHoursItemItemProvider == null) {
			calcTaskHoursItemItemProvider = new CalcTaskHoursItemItemProvider(this);
		}

		return calcTaskHoursItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskHoursVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskHoursVarItemProvider calcTaskHoursVarItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskHoursVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskHoursVarAdapter() {
		if (calcTaskHoursVarItemProvider == null) {
			calcTaskHoursVarItemProvider = new CalcTaskHoursVarItemProvider(this);
		}

		return calcTaskHoursVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskHours} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskHoursItemProvider calcTaskHoursItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskHours}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskHoursAdapter() {
		if (calcTaskHoursItemProvider == null) {
			calcTaskHoursItemProvider = new CalcTaskHoursItemProvider(this);
		}

		return calcTaskHoursItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskStart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskStartItemProvider calcTaskStartItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskStart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskStartAdapter() {
		if (calcTaskStartItemProvider == null) {
			calcTaskStartItemProvider = new CalcTaskStartItemProvider(this);
		}

		return calcTaskStartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskEndItemProvider calcTaskEndItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskEndAdapter() {
		if (calcTaskEndItemProvider == null) {
			calcTaskEndItemProvider = new CalcTaskEndItemProvider(this);
		}

		return calcTaskEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskResources} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskResourcesItemProvider calcTaskResourcesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcTaskResources}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskResourcesAdapter() {
		if (calcTaskResourcesItemProvider == null) {
			calcTaskResourcesItemProvider = new CalcTaskResourcesItemProvider(this);
		}

		return calcTaskResourcesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcProjectEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcProjectEndItemProvider calcProjectEndItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.CalcProjectEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcProjectEndAdapter() {
		if (calcProjectEndItemProvider == null) {
			calcProjectEndItemProvider = new CalcProjectEndItemProvider(this);
		}

		return calcProjectEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskResources} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerTaskResourcesItemProvider layerTaskResourcesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.LayerTaskResources}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerTaskResourcesAdapter() {
		if (layerTaskResourcesItemProvider == null) {
			layerTaskResourcesItemProvider = new LayerTaskResourcesItemProvider(this);
		}

		return layerTaskResourcesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousepropagator2.calc.ToUsePropagatorFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUsePropagatorFunctionItemProvider toUsePropagatorFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousepropagator2.calc.ToUsePropagatorFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUsePropagatorFunctionAdapter() {
		if (toUsePropagatorFunctionItemProvider == null) {
			toUsePropagatorFunctionItemProvider = new ToUsePropagatorFunctionItemProvider(this);
		}

		return toUsePropagatorFunctionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (scopeProjectItemProvider != null) scopeProjectItemProvider.dispose();
		if (layerTaskHoursItemItemProvider != null) layerTaskHoursItemItemProvider.dispose();
		if (layerTaskHoursVarItemProvider != null) layerTaskHoursVarItemProvider.dispose();
		if (layerTaskHoursItemProvider != null) layerTaskHoursItemProvider.dispose();
		if (layerTaskTimesItemProvider != null) layerTaskTimesItemProvider.dispose();
		if (calcProjectEndItemProvider != null) calcProjectEndItemProvider.dispose();
		if (layerTaskResourcesItemProvider != null) layerTaskResourcesItemProvider.dispose();
		if (calcTaskHoursItemItemProvider != null) calcTaskHoursItemItemProvider.dispose();
		if (calcTaskHoursVarItemProvider != null) calcTaskHoursVarItemProvider.dispose();
		if (calcTaskHoursItemProvider != null) calcTaskHoursItemProvider.dispose();
		if (calcTaskStartItemProvider != null) calcTaskStartItemProvider.dispose();
		if (calcTaskEndItemProvider != null) calcTaskEndItemProvider.dispose();
		if (calcTaskResourcesItemProvider != null) calcTaskResourcesItemProvider.dispose();
		if (toUsePropagatorFunctionItemProvider != null) toUsePropagatorFunctionItemProvider.dispose();
	}

}
