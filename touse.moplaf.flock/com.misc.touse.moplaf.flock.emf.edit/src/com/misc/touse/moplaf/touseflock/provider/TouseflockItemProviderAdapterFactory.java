/**
 */
package com.misc.touse.moplaf.touseflock.provider;

import com.misc.touse.moplaf.touseflock.util.TouseflockAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TouseflockItemProviderAdapterFactory extends TouseflockAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TouseflockItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.ToUseDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseDomainItemProvider toUseDomainItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.ToUseDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseDomainAdapter() {
		if (toUseDomainItemProvider == null) {
			toUseDomainItemProvider = new ToUseDomainItemProvider(this);
		}

		return toUseDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.Tractor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TractorItemProvider tractorItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.Tractor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTractorAdapter() {
		if (tractorItemProvider == null) {
			tractorItemProvider = new TractorItemProvider(this);
		}

		return tractorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.ToUseResourceTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseResourceTransitionItemProvider toUseResourceTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.ToUseResourceTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseResourceTransitionAdapter() {
		if (toUseResourceTransitionItemProvider == null) {
			toUseResourceTransitionItemProvider = new ToUseResourceTransitionItemProvider(this);
		}

		return toUseResourceTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.ToUseResourceMount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseResourceMountItemProvider toUseResourceMountItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.ToUseResourceMount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseResourceMountAdapter() {
		if (toUseResourceMountItemProvider == null) {
			toUseResourceMountItemProvider = new ToUseResourceMountItemProvider(this);
		}

		return toUseResourceMountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.ToUseResourceConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseResourceConfigurationItemProvider toUseResourceConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.ToUseResourceConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseResourceConfigurationAdapter() {
		if (toUseResourceConfigurationItemProvider == null) {
			toUseResourceConfigurationItemProvider = new ToUseResourceConfigurationItemProvider(this);
		}

		return toUseResourceConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.Trailer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrailerItemProvider trailerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.Trailer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrailerAdapter() {
		if (trailerItemProvider == null) {
			trailerItemProvider = new TrailerItemProvider(this);
		}

		return trailerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.Shipment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipmentItemProvider shipmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.Shipment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipmentAdapter() {
		if (shipmentItemProvider == null) {
			shipmentItemProvider = new ShipmentItemProvider(this);
		}

		return shipmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.AttachTrailer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttachTrailerItemProvider attachTrailerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.AttachTrailer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttachTrailerAdapter() {
		if (attachTrailerItemProvider == null) {
			attachTrailerItemProvider = new AttachTrailerItemProvider(this);
		}

		return attachTrailerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.DetachTrailer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetachTrailerItemProvider detachTrailerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.DetachTrailer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetachTrailerAdapter() {
		if (detachTrailerItemProvider == null) {
			detachTrailerItemProvider = new DetachTrailerItemProvider(this);
		}

		return detachTrailerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.LoadShipment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadShipmentItemProvider loadShipmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.LoadShipment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadShipmentAdapter() {
		if (loadShipmentItemProvider == null) {
			loadShipmentItemProvider = new LoadShipmentItemProvider(this);
		}

		return loadShipmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.UnloadShipment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnloadShipmentItemProvider unloadShipmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.UnloadShipment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnloadShipmentAdapter() {
		if (unloadShipmentItemProvider == null) {
			unloadShipmentItemProvider = new UnloadShipmentItemProvider(this);
		}

		return unloadShipmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.ToUseLocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseLocationItemProvider toUseLocationItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.ToUseLocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseLocationAdapter() {
		if (toUseLocationItemProvider == null) {
			toUseLocationItemProvider = new ToUseLocationItemProvider(this);
		}

		return toUseLocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.FlockScopeToUse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlockScopeToUseItemProvider flockScopeToUseItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.FlockScopeToUse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlockScopeToUseAdapter() {
		if (flockScopeToUseItemProvider == null) {
			flockScopeToUseItemProvider = new FlockScopeToUseItemProvider(this);
		}

		return flockScopeToUseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.TractorConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TractorConfigurationItemProvider tractorConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.TractorConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTractorConfigurationAdapter() {
		if (tractorConfigurationItemProvider == null) {
			tractorConfigurationItemProvider = new TractorConfigurationItemProvider(this);
		}

		return tractorConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.touseflock.TrailerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrailerConfigurationItemProvider trailerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.touseflock.TrailerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrailerConfigurationAdapter() {
		if (trailerConfigurationItemProvider == null) {
			trailerConfigurationItemProvider = new TrailerConfigurationItemProvider(this);
		}

		return trailerConfigurationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (toUseDomainItemProvider != null) toUseDomainItemProvider.dispose();
		if (toUseResourceTransitionItemProvider != null) toUseResourceTransitionItemProvider.dispose();
		if (toUseResourceConfigurationItemProvider != null) toUseResourceConfigurationItemProvider.dispose();
		if (toUseResourceMountItemProvider != null) toUseResourceMountItemProvider.dispose();
		if (tractorItemProvider != null) tractorItemProvider.dispose();
		if (trailerItemProvider != null) trailerItemProvider.dispose();
		if (shipmentItemProvider != null) shipmentItemProvider.dispose();
		if (tractorConfigurationItemProvider != null) tractorConfigurationItemProvider.dispose();
		if (attachTrailerItemProvider != null) attachTrailerItemProvider.dispose();
		if (detachTrailerItemProvider != null) detachTrailerItemProvider.dispose();
		if (trailerConfigurationItemProvider != null) trailerConfigurationItemProvider.dispose();
		if (loadShipmentItemProvider != null) loadShipmentItemProvider.dispose();
		if (unloadShipmentItemProvider != null) unloadShipmentItemProvider.dispose();
		if (toUseLocationItemProvider != null) toUseLocationItemProvider.dispose();
		if (flockScopeToUseItemProvider != null) flockScopeToUseItemProvider.dispose();
	}

}
