/**
 */
package com.misc.touse.moplaf.tousescheduler.provider;

import com.misc.touse.moplaf.tousescheduler.util.ToUseSchedulerAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.Disposable;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ToUseSchedulerItemProviderAdapterFactory extends ToUseSchedulerAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Disposable disposable = new Disposable();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ToUseSchedulerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.Vehicle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VehicleItemProvider vehicleItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.Vehicle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVehicleAdapter() {
		if (vehicleItemProvider == null) {
			vehicleItemProvider = new VehicleItemProvider(this);
		}

		return vehicleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseScore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseScoreItemProvider toUseScoreItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseScore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseScoreAdapter() {
		if (toUseScoreItemProvider == null) {
			toUseScoreItemProvider = new ToUseScoreItemProvider(this);
		}

		return toUseScoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseSchedulerItemProvider toUseSchedulerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseSchedulerAdapter() {
		if (toUseSchedulerItemProvider == null) {
			toUseSchedulerItemProvider = new ToUseSchedulerItemProvider(this);
		}

		return toUseSchedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.Shipment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShipmentItemProvider shipmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.Shipment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShipmentAdapter() {
		if (shipmentItemProvider == null) {
			shipmentItemProvider = new ShipmentItemProvider(this);
		}

		return shipmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduleTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseScheduleTaskItemProvider toUseScheduleTaskItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduleTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseScheduleTaskAdapter() {
		if (toUseScheduleTaskItemProvider == null) {
			toUseScheduleTaskItemProvider = new ToUseScheduleTaskItemProvider(this);
		}

		return toUseScheduleTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduleResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseScheduleResourceItemProvider toUseScheduleResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduleResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseScheduleResourceAdapter() {
		if (toUseScheduleResourceItemProvider == null) {
			toUseScheduleResourceItemProvider = new ToUseScheduleResourceItemProvider(this);
		}

		return toUseScheduleResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ScopeScheduleScore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeScheduleScoreItemProvider scopeScheduleScoreItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ScopeScheduleScore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeScheduleScoreAdapter() {
		if (scopeScheduleScoreItemProvider == null) {
			scopeScheduleScoreItemProvider = new ScopeScheduleScoreItemProvider(this);
		}

		return scopeScheduleScoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.LayerScheduleDistance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerScheduleDistanceItemProvider layerScheduleDistanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.LayerScheduleDistance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerScheduleDistanceAdapter() {
		if (layerScheduleDistanceItemProvider == null) {
			layerScheduleDistanceItemProvider = new LayerScheduleDistanceItemProvider(this);
		}

		return layerScheduleDistanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcTaskDistanceFromPrevious} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskDistanceFromPreviousItemProvider calcTaskDistanceFromPreviousItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcTaskDistanceFromPrevious}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskDistanceFromPreviousAdapter() {
		if (calcTaskDistanceFromPreviousItemProvider == null) {
			calcTaskDistanceFromPreviousItemProvider = new CalcTaskDistanceFromPreviousItemProvider(this);
		}

		return calcTaskDistanceFromPreviousItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcTaskDistance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskDistanceItemProvider calcTaskDistanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcTaskDistance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskDistanceAdapter() {
		if (calcTaskDistanceItemProvider == null) {
			calcTaskDistanceItemProvider = new CalcTaskDistanceItemProvider(this);
		}

		return calcTaskDistanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcResourceDistanceFromLast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcResourceDistanceFromLastItemProvider calcResourceDistanceFromLastItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcResourceDistanceFromLast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcResourceDistanceFromLastAdapter() {
		if (calcResourceDistanceFromLastItemProvider == null) {
			calcResourceDistanceFromLastItemProvider = new CalcResourceDistanceFromLastItemProvider(this);
		}

		return calcResourceDistanceFromLastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcResourceDistance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcResourceDistanceItemProvider calcResourceDistanceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcResourceDistance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcResourceDistanceAdapter() {
		if (calcResourceDistanceItemProvider == null) {
			calcResourceDistanceItemProvider = new CalcResourceDistanceItemProvider(this);
		}

		return calcResourceDistanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.LayerScheduleVolumeLoaded} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerScheduleVolumeLoadedItemProvider layerScheduleVolumeLoadedItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.LayerScheduleVolumeLoaded}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerScheduleVolumeLoadedAdapter() {
		if (layerScheduleVolumeLoadedItemProvider == null) {
			layerScheduleVolumeLoadedItemProvider = new LayerScheduleVolumeLoadedItemProvider(this);
		}

		return layerScheduleVolumeLoadedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcTaskStartVolumeLoaded} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskStartVolumeLoadedItemProvider calcTaskStartVolumeLoadedItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcTaskStartVolumeLoaded}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskStartVolumeLoadedAdapter() {
		if (calcTaskStartVolumeLoadedItemProvider == null) {
			calcTaskStartVolumeLoadedItemProvider = new CalcTaskStartVolumeLoadedItemProvider(this);
		}

		return calcTaskStartVolumeLoadedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcTaskEndVolumeLoaded} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcTaskEndVolumeLoadedItemProvider calcTaskEndVolumeLoadedItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcTaskEndVolumeLoaded}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcTaskEndVolumeLoadedAdapter() {
		if (calcTaskEndVolumeLoadedItemProvider == null) {
			calcTaskEndVolumeLoadedItemProvider = new CalcTaskEndVolumeLoadedItemProvider(this);
		}

		return calcTaskEndVolumeLoadedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcResourceVolumeOverload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcResourceVolumeOverloadItemProvider calcResourceVolumeOverloadItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcResourceVolumeOverload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcResourceVolumeOverloadAdapter() {
		if (calcResourceVolumeOverloadItemProvider == null) {
			calcResourceVolumeOverloadItemProvider = new CalcResourceVolumeOverloadItemProvider(this);
		}

		return calcResourceVolumeOverloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.LayerSchedulePlannedBenefit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerSchedulePlannedBenefitItemProvider layerSchedulePlannedBenefitItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.LayerSchedulePlannedBenefit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerSchedulePlannedBenefitAdapter() {
		if (layerSchedulePlannedBenefitItemProvider == null) {
			layerSchedulePlannedBenefitItemProvider = new LayerSchedulePlannedBenefitItemProvider(this);
		}

		return layerSchedulePlannedBenefitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.CalcResourcePlannedBenefit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcResourcePlannedBenefitItemProvider calcResourcePlannedBenefitItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.CalcResourcePlannedBenefit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcResourcePlannedBenefitAdapter() {
		if (calcResourcePlannedBenefitItemProvider == null) {
			calcResourcePlannedBenefitItemProvider = new CalcResourcePlannedBenefitItemProvider(this);
		}

		return calcResourcePlannedBenefitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseStepDestructConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseStepDestructConstructItemProvider toUseStepDestructConstructItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseStepDestructConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseStepDestructConstructAdapter() {
		if (toUseStepDestructConstructItemProvider == null) {
			toUseStepDestructConstructItemProvider = new ToUseStepDestructConstructItemProvider(this);
		}

		return toUseStepDestructConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseUnscheduleLoadUnload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseUnscheduleLoadUnloadItemProvider toUseUnscheduleLoadUnloadItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseUnscheduleLoadUnload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseUnscheduleLoadUnloadAdapter() {
		if (toUseUnscheduleLoadUnloadItemProvider == null) {
			toUseUnscheduleLoadUnloadItemProvider = new ToUseUnscheduleLoadUnloadItemProvider(this);
		}

		return toUseUnscheduleLoadUnloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUsePhaseDestructConstruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUsePhaseDestructConstructItemProvider toUsePhaseDestructConstructItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUsePhaseDestructConstruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUsePhaseDestructConstructAdapter() {
		if (toUsePhaseDestructConstructItemProvider == null) {
			toUsePhaseDestructConstructItemProvider = new ToUsePhaseDestructConstructItemProvider(this);
		}

		return toUsePhaseDestructConstructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduleLoadUnload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseScheduleLoadUnloadItemProvider toUseScheduleLoadUnloadItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseScheduleLoadUnload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseScheduleLoadUnloadAdapter() {
		if (toUseScheduleLoadUnloadItemProvider == null) {
			toUseScheduleLoadUnloadItemProvider = new ToUseScheduleLoadUnloadItemProvider(this);
		}

		return toUseScheduleLoadUnloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseLoadShipment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseLoadShipmentItemProvider toUseLoadShipmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseLoadShipment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseLoadShipmentAdapter() {
		if (toUseLoadShipmentItemProvider == null) {
			toUseLoadShipmentItemProvider = new ToUseLoadShipmentItemProvider(this);
		}

		return toUseLoadShipmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.touse.moplaf.tousescheduler.ToUseUnloadShipment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToUseUnloadShipmentItemProvider toUseUnloadShipmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseUnloadShipment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseUnloadShipmentAdapter() {
		if (toUseUnloadShipmentItemProvider == null) {
			toUseUnloadShipmentItemProvider = new ToUseUnloadShipmentItemProvider(this);
		}

		return toUseUnloadShipmentItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.misc.touse.moplaf.tousescheduler.ToUseSchedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToUseScheduleAdapter() {
		return new ToUseScheduleItemProvider(this);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected void associate(Adapter adapter, Notifier target) {
		super.associate(adapter, target);
		if (adapter != null) {
			disposable.add(adapter);
		}
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		disposable.dispose();
	}

}
